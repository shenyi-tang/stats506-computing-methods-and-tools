Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
Rndrng_Prvdr_State_FIPS,
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
)
merged_data <- clean_cardio_medicare %>%
# join on the key "zipcode"
left_join(tax20,
by = c("Rndrng_Prvdr_Zip5" = "zipcode",
"Rndrng_Prvdr_State_FIPS" = "STATEFIPS"),
keep = TRUE,
relationship = "many-to-many") %>%
select(
# medicare payment
Avg_Mdcr_Pymt_Amt,
Avg_Sbmtd_Chrg,
# medicare provider related features
Rndrng_Prvdr_Ent_Cd,
Rndrng_Prvdr_Gndr,
Rndrng_Prvdr_Crdntls,
Rndrng_Prvdr_Type,
Rndrng_Prvdr_Mdcr_Prtcptg_Ind,
# medicare services information
HCPCS_Cd,
HCPCS_Drug_Ind,
Tot_Benes,
Tot_Srvcs,
Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
Rndrng_Prvdr_State_FIPS,
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
)
merged_data <- clean_cardio_medicare %>%
# join on the key "zipcode"
left_join(tax20,
by = c("Rndrng_Prvdr_Zip5" = "zipcode",
"Rndrng_Prvdr_State_FIPS" = "STATEFIPS"),
keep = TRUE,
relationship = "many-to-many") %>%
select(
# medicare payment
Avg_Mdcr_Pymt_Amt,
Avg_Sbmtd_Chrg,
# medicare provider related features
Rndrng_Prvdr_Ent_Cd,
Rndrng_Prvdr_Gndr,
Rndrng_Prvdr_Crdntls,
Rndrng_Prvdr_Type,
Rndrng_Prvdr_Mdcr_Prtcptg_Ind,
# medicare services information
HCPCS_Cd,
HCPCS_Drug_Ind,
Tot_Benes,
Tot_Srvcs,
Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
Rndrng_Prvdr_State_FIPS,
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
)
View(merged_data)
a <- as.data.frame(merged_data[!complete.cases(merged_data),])
View(a)
merged_data <- clean_cardio_medicare %>%
filter(!is.na(Rndrng_Prvdr_State_FIPS)) %>%
# join on the key "zipcode"
left_join(tax20 %>% filter(!is.na(Rndrng_Prvdr_State_FIPS)),
by = c("Rndrng_Prvdr_Zip5" = "zipcode",
"Rndrng_Prvdr_State_FIPS" = "STATEFIPS"),
keep = TRUE,
relationship = "many-to-many") %>%
select(
# medicare payment
Avg_Mdcr_Pymt_Amt,
Avg_Sbmtd_Chrg,
# medicare provider related features
Rndrng_Prvdr_Ent_Cd,
Rndrng_Prvdr_Gndr,
Rndrng_Prvdr_Crdntls,
Rndrng_Prvdr_Type,
Rndrng_Prvdr_Mdcr_Prtcptg_Ind,
# medicare services information
HCPCS_Cd,
HCPCS_Drug_Ind,
Tot_Benes,
Tot_Srvcs,
Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
Rndrng_Prvdr_State_FIPS,
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
)
View(clean_cardio_medicare)
merged_data <- clean_cardio_medicare %>%
filter(!is.na(Rndrng_Prvdr_State_FIPS)) %>%
# join on the key "zipcode"
left_join(tax20 %>% filter(!is.na(STATEFIPS)),
by = c("Rndrng_Prvdr_Zip5" = "zipcode",
"Rndrng_Prvdr_State_FIPS" = "STATEFIPS"),
keep = TRUE,
relationship = "many-to-many") %>%
select(
# medicare payment
Avg_Mdcr_Pymt_Amt,
Avg_Sbmtd_Chrg,
# medicare provider related features
Rndrng_Prvdr_Ent_Cd,
Rndrng_Prvdr_Gndr,
Rndrng_Prvdr_Crdntls,
Rndrng_Prvdr_Type,
Rndrng_Prvdr_Mdcr_Prtcptg_Ind,
# medicare services information
HCPCS_Cd,
HCPCS_Drug_Ind,
Tot_Benes,
Tot_Srvcs,
Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
Rndrng_Prvdr_State_FIPS,
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
)
View(merged_data)
clean_cardio_medicare <- cardio_med20 %>%
filter(
!is.na(Avg_Mdcr_Pymt_Amt),
!!is.na(Rndrng_Prvdr_State_FIPS),
Avg_Mdcr_Pymt_Amt >= 0,
Tot_Srvcs > 0,
Tot_Benes > 0
)
clean_cardio_medicare <- cardio_med20 %>%
filter(
!is.na(Avg_Mdcr_Pymt_Amt),
!is.na(Rndrng_Prvdr_State_FIPS),
Avg_Mdcr_Pymt_Amt >= 0,
Tot_Srvcs > 0,
Tot_Benes > 0
)
clean_tax20 <- tax20 %>%
filter(!is.na(STATEFIPS))
View(clean_tax20)
View(merged_data)
View(a)
rowSums(is.na(tax20$STATEFIPS))
?rowSums
sum(is.na(tax20$STATEFIPS))
clean_cardio_medicare <- clean_cardio_medicare %>%
mutate(Rndrng_Prvdr_Crdntls = if_else(is.na(Rndrng_Prvdr_Crdntls), "O", Rndrng_Prvdr_Crdntls),
Rndrng_Prvdr_Gndr = if_else(is.na(Rndrng_Prvdr_Gndr), "O", Rndrng_Prvdr_Gndr))
sum(is.na$Rndrng_Prvdr_Crdntls)
sum(is.na(clean_cardio_medicare$Rndrng_Prvdr_Crdntls))
merged_data <- clean_cardio_medicare %>%
# join on the key "zipcode"
left_join(clean_tax20,
by = c("Rndrng_Prvdr_Zip5" = "zipcode",
"Rndrng_Prvdr_State_FIPS" = "STATEFIPS"),
keep = TRUE,
relationship = "many-to-many") %>%
select(
# medicare payment
Avg_Mdcr_Pymt_Amt,
Avg_Sbmtd_Chrg,
# medicare provider related features
Rndrng_Prvdr_Ent_Cd,
Rndrng_Prvdr_Gndr,
Rndrng_Prvdr_Crdntls,
Rndrng_Prvdr_Type,
Rndrng_Prvdr_Mdcr_Prtcptg_Ind,
# medicare services information
HCPCS_Cd,
HCPCS_Drug_Ind,
Tot_Benes,
Tot_Srvcs,
Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
Rndrng_Prvdr_State_FIPS,
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
) %>% na.omit()
a <- as.data.frame(merged_data[!complete.cases(merged_data),])
model_data <- merged_data %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.numeric)) %>%
na.omit()
# merge two dataset and select possible features
merged_data <- clean_cardio_medicare %>%
# join on the key "zipcode"
left_join(clean_tax20,
by = c("Rndrng_Prvdr_Zip5" = "zipcode",
"Rndrng_Prvdr_State_FIPS" = "STATEFIPS"),
keep = TRUE,
relationship = "many-to-many") %>%
select(
# medicare payment
Avg_Mdcr_Pymt_Amt,
Avg_Sbmtd_Chrg,
# medicare provider related features
Rndrng_Prvdr_Ent_Cd,
Rndrng_Prvdr_Gndr,
Rndrng_Prvdr_Crdntls,
Rndrng_Prvdr_Type,
Rndrng_Prvdr_Mdcr_Prtcptg_Ind,
# medicare services information
HCPCS_Cd,
HCPCS_Drug_Ind,
Tot_Benes,
Tot_Srvcs,
Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
) %>% na.omit()
model_data <- merged_data %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.numeric)) %>%
na.omit()
model_matrix <- model.matrix(~ . - 1, data = model_data %>% select(-Avg_Mdcr_Pymt_Amt))
install.packages("tictoc")
# 开始整体计时
tic("Total Runtime")
library(tictoc)
# 开始整体计时
tic("Total Runtime")
# 设置并行计算
cat("Setting up parallel processing...\n")
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
cat("Using", detectCores() - 1, "cores for parallel processing\n\n")
# 参数设置
cat("Generating parameter combinations...\n")
param_list <- list(
max_depth = c(3, 6, 9),
eta = c(0.01, 0.1, 0.3),
gamma = c(0, 0.1, 0.2),
colsample_bytree = c(0.6, 0.8, 1.0),
min_child_weight = c(1, 3, 5),
subsample = c(0.6, 0.8, 1.0)
)
# 生成随机参数组合
n_combinations <- 20
set.seed(506)
cat(sprintf("Generating %d random parameter combinations...\n", n_combinations))
random_grid <- data.frame(
nrounds = sample(c(100, 200, 300), n_combinations, replace = TRUE),
max_depth = sample(param_list$max_depth, n_combinations, replace = TRUE),
eta = sample(param_list$eta, n_combinations, replace = TRUE),
gamma = sample(param_list$gamma, n_combinations, replace = TRUE),
colsample_bytree = sample(param_list$colsample_bytree, n_combinations, replace = TRUE),
min_child_weight = sample(param_list$min_child_weight, n_combinations, replace = TRUE),
subsample = sample(param_list$subsample, n_combinations, replace = TRUE)
)
cat("Parameter grid preview:\n")
print(head(random_grid, 3))
cat("...\n\n")
# 设置交叉验证控制
cat("Setting up cross-validation...\n")
tune_control <- trainControl(
method = "cv",
number = 5,
allowParallel = TRUE,
verboseIter = TRUE,
# 添加进度条
progress = "text"
)
# 开始整体计时
tic("Total Runtime")
# 设置并行计算
cat("Setting up parallel processing...\n")
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
cat("Using", detectCores() - 1, "cores for parallel processing\n\n")
# 参数设置
cat("Generating parameter combinations...\n")
param_list <- list(
max_depth = c(3, 6, 9),
eta = c(0.01, 0.1, 0.3),
gamma = c(0, 0.1, 0.2),
colsample_bytree = c(0.6, 0.8, 1.0),
min_child_weight = c(1, 3, 5),
subsample = c(0.6, 0.8, 1.0)
)
# 生成随机参数组合
n_combinations <- 20
set.seed(506)
cat(sprintf("Generating %d random parameter combinations...\n", n_combinations))
random_grid <- data.frame(
nrounds = sample(c(100, 200, 300), n_combinations, replace = TRUE),
max_depth = sample(param_list$max_depth, n_combinations, replace = TRUE),
eta = sample(param_list$eta, n_combinations, replace = TRUE),
gamma = sample(param_list$gamma, n_combinations, replace = TRUE),
colsample_bytree = sample(param_list$colsample_bytree, n_combinations, replace = TRUE),
min_child_weight = sample(param_list$min_child_weight, n_combinations, replace = TRUE),
subsample = sample(param_list$subsample, n_combinations, replace = TRUE)
)
cat("Parameter grid preview:\n")
print(head(random_grid, 3))
cat("...\n\n")
# 设置交叉验证控制
cat("Setting up cross-validation...\n")
tune_control <- trainControl(
method = "cv",
number = 5,
allowParallel = TRUE,
verboseIter = TRUE
)
# 使用caret进行并行化的参数调优
cat("\nStarting parameter tuning with cross-validation...\n")
tic("Parameter Tuning")
# 添加进度计数器
total_fits <- n_combinations * 5  # 参数组合数 * 交叉验证折数
current_fit <- 0
# 定义进度更新函数
progress_log <- function() {
current_fit <<- current_fit + 1
if(current_fit %% 5 == 0) {  # 每完成一组参数的交叉验证就输出进度
cat(sprintf("\nProgress: %d/%d parameter combinations completed (%.1f%%)\n",
current_fit/5, n_combinations,
current_fit/total_fits*100))
}
}
xgb_tuned <- train(
x = model_matrix,
y = model_data$Avg_Mdcr_Pymt_Amt,
method = "xgbTree",
trControl = tune_control,
tuneGrid = random_grid,
metric = "RMSE",
verbose = FALSE
)
stopCluster(cl)
cardio_med20 <- med20 %>% filter(grepl("cardiology.*",tolower(Rndrng_Prvdr_Type)))
summary_stats <- function(df) {
df %>%
summarise(across(where(is.numeric),
list(
missing = ~sum(is.na(.)),
zeros = ~sum(. == 0, na.rm = TRUE),
negative = ~sum(. < 0, na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE)
)))
}
medicare_stats <- summary_stats(cardio_med20)
tax_stats <- summary_stats(tax_20)
# statistic description
# check and clean NaN or abnormal data
summary_stats <- function(df) {
df %>%
summarise(across(where(is.numeric),
list(
missing = ~sum(is.na(.)),
zeros = ~sum(. == 0, na.rm = TRUE),
negative = ~sum(. < 0, na.rm = TRUE),
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE)
)))
}
medicare_stats <- summary_stats(cardio_med20)
tax_stats <- summary_stats(tax20)
# clean data
clean_cardio_medicare <- cardio_med20 %>%
filter(
!is.na(Avg_Mdcr_Pymt_Amt),
!is.na(Rndrng_Prvdr_State_FIPS),
Avg_Mdcr_Pymt_Amt >= 0,
Tot_Srvcs > 0,
Tot_Benes > 0
)
clean_tax20 <- tax20 %>%
filter(!is.na(STATEFIPS))
clean_cardio_medicare <- clean_cardio_medicare %>%
mutate(Rndrng_Prvdr_Crdntls = if_else(is.na(Rndrng_Prvdr_Crdntls), "O", Rndrng_Prvdr_Crdntls),
Rndrng_Prvdr_Gndr = if_else(is.na(Rndrng_Prvdr_Gndr), "O", Rndrng_Prvdr_Gndr))
# merge two dataset and select possible features
merged_data <- clean_cardio_medicare %>%
# join on the key "zipcode"
left_join(clean_tax20,
by = c("Rndrng_Prvdr_Zip5" = "zipcode",
"Rndrng_Prvdr_State_FIPS" = "STATEFIPS"),
keep = TRUE,
relationship = "many-to-many") %>%
select(
# medicare payment
Avg_Mdcr_Pymt_Amt,
Avg_Sbmtd_Chrg,
# medicare provider related features
Rndrng_Prvdr_Ent_Cd,
Rndrng_Prvdr_Gndr,
Rndrng_Prvdr_Crdntls,
Rndrng_Prvdr_Type,
Rndrng_Prvdr_Mdcr_Prtcptg_Ind,
# medicare services information
HCPCS_Cd,
HCPCS_Drug_Ind,
Tot_Benes,
Tot_Srvcs,
Tot_Bene_Day_Srvcs,
Place_Of_Srvc,
# geography and tax related features
STATEFIPS,
agi_stub,
A00100,
A00200,
A00300,
A00700,
A01700,
A02500,
A17000,
A19700,
A85530
) %>% na.omit()
model_data <- merged_data %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.numeric)) %>%
na.omit()
model_matrix <- model.matrix(~ . - 1, data = model_data %>% select(-Avg_Mdcr_Pymt_Amt))
cat("\nResults saved to 'xgboost_results.RData'\n")
rm(tune_control)
rm(c(param_list,random_grid))
rm(list(param_list,random_grid))
rm(param_list)
rm(random_grid)
rm(current_fit)
rm(n_combinations)
rm(total_fits)
rm(progress_log())
rm(progress_log)
rm(cl)
unique(med20[grepl("Cardiology",med20$Rndrng_Prvdr_Type),])$Rndrng_Prvdr_Type
unique(med20[grepl("Cardiology",med20$Rndrng_Prvdr_Type),]$Rndrng_Prvdr_Type)
View(a)
rm(a)
rm(tax20)
# tax
tax20 <- read_csv("data/20zpallagi.csv")
rm(tax21)
rm(med21)

200 * 600
x <- 0:500
x <- 0:500
s0 <- 0
for (i in seq_along(x)) {
s0 <- s0 + x[i]
}
## Vectorized
s1 <- sum(x)
## Do we get the same sum?
s0 == s1
install.packages('microbenchmark')
rpa <- read.csv("Residential_Property_Assessments.csv",sep = ',')
a <- c(2,3)
length(a)
typeof(a)
c(1, "a")
typeof(TRUE)
typeof(NA)
c()
c(1, 2, Inf, NA, NaN, TRUE)
c()
nullvec <- c()
length(nullvec)
typeof(nullvec)
b <- vector('character', length = 10)
typeof(b)
length(b)
v <- c(2, 1, 5, NA, 7)
v[c(2,4,5)]
v[3]
v[-(1:3)]
v[c(TRUE,FALSE,TRUE,FALSE,FALSE)]
##
list(1, "a")
l <- list(1, "a", mtcars)
typeof(l)
sapply(l, typeof)
l <- list(1L, "a", mtcars)
typeof(l)
sapply(l, typeof)
l[2]
l[[2]]
m <- list(c(1,2), c("a","b",'c'))
m[[2]][3]
m[1:2]
m[[1:2]]
b <- c('first' = 1, "second" = 2)
b
b['first']
names(b)
names(b) <- c('uno', 'doc')
b
d <- c("a", "b")
d[1] <- 1
d
d <- c("a", "b")
d
d[1] <- 1
d
c(first = 1)
c
c(first var = 1)
c(first = 1)
c
c("first" = 1)
c
ll <- list(a = 1, b = 2)
ll[b]
ll <- list(a = 1, b = 2)
ll$b
# class is more general then 'mode' or 'typeof'
a
class(a)
class(a) <- c("cat")
a
class(a) <- c("cat", "dog")
a
f <- c(1,2)
class(f)
class(f) <- "character"
f
m <- matrix(c(1,2,3,4), nrow = 2)
m
m <- matrix(c(1,2,3,4), nrow = 2)
m
typeof(m)
mode(m)
class(m)
length(m)
dim(m)
dim(m) <- c(1,4)
m
dim(m) <- c(2,2)
m[1,]
m[,]
m[1:2,2]
m[1,1:2]
attributes(b)
attributes(b)$name
attr(b, "names") <- c("a", "b")
b
b[a]
attr(b,"animals") <- "cat"
b
df <- data.frame(a = 1:4,
b = c("a", "b", "c", "d"),
c = c(TRUE, FALSE, TRUE, FALSE))
df
df[2,]
df$a
attr(df)
attributes(df)
class(df)
class(df) <- "list"
df
#
sum(1,2,3,NA)
sum(1,2,3,NA, na.rm = TRUE)
#
table(c(1,1,2,NA))
table(c(1,1,2,NA),useNA = 'always')
table(c(1,1,2), useNA = 'always')
# function
?runif
runif(4)
runif(4, 10, 200)
rm(list = ls())
rpa <- read.csv("Residential_Property_Assessments.csv",sep = ',')
View(rpa)
View(rpa)
plot(la, a,
main = 'Property Assessment and Livable Area',
xlab = 'Square Feet of Livable Area',
ylab = 'Assessment')
rpa <- read.csv("Residential_Property_Assessments.csv",sep = ',')
a <- rpa$Assessment
la <- rpa$Livable.Area
plot(la, a,
main = 'Property Assessment and Livable Area',
xlab = 'Square Feet of Livable Area',
ylab = 'Assessment')
plot(la, a,
main = 'Property Assessment and Livable Area',
xlab = 'Square Feet of Livable Area',
ylab = 'Assessment')
model <- lm(a~la)
model <- lm(a~la)
model
predict(model, 2500)
predict(model, newdata = data.frame(la = 2500))
area_diff <- 200
price_diff <- model$coef[2] * area_diff
price_diff
library(MASS)
mall = read.csv("mall_sales.csv")
pwd()
getwd()
getwd()
setwd("~/UMich/2024fall/stats500")
mall = read.csv("mall_sales.csv")
library(MASS)
n = 50
#fix the locations for our 50 x variables
#we'll draw them from a uniform distribution,
#but any distribution would be ok
x = runif(n, 0, 1)
beta0 = 1
beta1 = 5
sigma.epsilon = 2
install.packages('Xquartz')
install.packages('car')
install.packages('rgl')
mall = read.csv("mall_sales.csv")
mall = read.csv("mall_sales.csv")
sales = mall$Sales....sq.ft.
income = mall$Income..000.
competitors = mall$Competitors
n =length(competitors)
par(mgp = c(1.8,.5,0), mar = c(3,3,2,1))
cor(income, sales)
lm.income = lm(sales~income)
plot(income, sales, pch = 16, main = "Regression of Sales on Income")
abline(lm.income, lwd=  2)
lm.income
par(mgp = c(1.8,.5,0), mar = c(3,3,2,1))
cor(income, sales)
lm.income = lm(sales~income)
plot(income, sales, pch = 16, main = "Regression of Sales on Income")
abline(lm.income, lwd=  2)
View(rpa)
# mean of the residuals from the regression
mean(model$residuals)
yhat <- predict(model, la)
# mean of the residuals from the regression
mean(model$residuals)
yhat <- predict(model, newdata = data.frame(la))
cor(yhat, model$residuals)
rm(ls = list())
foo <- function(){
print(3)
}
foo()
foo
x <- runif(100,15,100)
xbar <- mean(x)
xsd <- sd(x)
z <- (x - xbar)/xsd(x)
x <- runif(100,15,100)
xbar <- mean(x)
xsd <- sd(x)
z <- (x - xbar)/xsd
mean(z)
sd(z)
rm(list = ls())
std <- function(x){
xbar <- mean(x)
xsd <- sd(x)
z <- (x - xbar)/xsd
return(z)
}
std(c(2,5,5))
std(c(1,2,5,NA))
std <- function(x){
xbar <- mean(x, na.rm = TRUE)
xsd <- sd(x, na.rm = TRUE)
z <- (x - xbar)/xsd
return(z)
}
std(c(2,2,5,NA))
std3 <- function(x, na.rm_org){
xbar <- mean(x, na.rm = na.rm_org)
xsd <- sd(x, na.rm = na.rm_org)
z <- (x - xbar)/xsd
return(z)
}
std3(c(2,5,5,NA), TRUE)
std3(c(2,5,5,NA), FALSE)
std4 <- function(x, y, na.rm_org = FALSE){
# std4 takes in a vector of numeric, generates
# their z-scores, and returns the vector of
# z-scores
xbar <- mean(x, na.rm = na.rm_org)
xsd <- sd(x, na.rm = na.rm_org)
z <- (x - xbar)/xsd
return(z)
}
std4 <- function(x, y, na.rm_org = FALSE){
# std4 takes in a vector of numeric, generates
# their z-scores, and returns the vector of
# z-scores
xbar <- mean(x, na.rm = na.rm_org)
xsd <- sd(x, na.rm = na.rm_org)
z <- (x - xbar)/xsd
return(z)
}
std5 <- function(x, na.rm_org){
# if the input is not numeric
if(!is.numeric(x)){
# make the input x as a numeric
x <- as.numeric(x)
if(!is.numeric(x)){
stop("x must be numeric, or convertible to numeric")
}
}
xbar <- mean(x, na.rm = na.rm_org)
xsd <- sd(x, na.rm = na.rm_org)
z <- (x - xbar)/xsd
return(z)
}
std5(c(1,2,5))
std5(c(1,2,5))
std5 <- function(x, na.rm_org = FALSE){
# if the input is not numeric
if(!is.numeric(x)){
# make the input x as a numeric
x <- as.numeric(x)
if(!is.numeric(x)){
stop("x must be numeric, or convertible to numeric")
}
}
xbar <- mean(x, na.rm = na.rm_org)
xsd <- sd(x, na.rm = na.rm_org)
z <- (x - xbar)/xsd
return(z)
}
std5(c(1,2,5))
std5(c(1,2,4,NA), TRUE)
std5 <- function(x, na.rm_org = FALSE){
# if the input is not numeric
if(!is.numeric(x)){
# make the input x as a numeric
warning("x must be numeric, try to convert it")
x <- as.numeric(x)
if(!is.numeric(x)){
stop("x must be numeric, or convertible to numeric")
}
}
xbar <- mean(x, na.rm = na.rm_org)
xsd <- sd(x, na.rm = na.rm_org)
z <- (x - xbar)/xsd
return(z)
}
std5(c(1,2,5))
std5(c(1,2,4,NA), TRUE)
std(c("1", "2", "5"))
as.numeric(c("1", "2", "5"))
td5 <- function(x, na.rm_org = FALSE){
# if the input is not numeric
if(!is.numeric(x)){
# make the input x as a numeric
warning("x must be numeric, try to convert it")
x <- as.numeric(x)
if(!is.numeric(x)){
stop("x must be numeric, or convertible to numeric")
}
}
xbar <- mean(x, na.rm = na.rm_org)
xsd <- sd(x, na.rm = na.rm_org)
z <- (x - xbar)/xsd
return(z)
}
std5(c(1,2,5))
std5(c(1,2,4,NA), TRUE)
std5(c("1", "2", "5"))
foo <- function(x){
x
}
y <- 5
foo(y)
foo <- function(x){
x <- 4
x
}
y <- 5
foo(y)
foo <- function(x){
x <- 4
x
}
x <- 5
foo(x)
x
rm(x)
baz <- function(x){
# <<- to avoid some side affects
p <<- 5
return(p)
}
baz()
p <- 'car'
baz()
foo()
foo <- function(){
print(1)
return(2)
# code below will never be touched, after return
print(3)
}
foo()
for (i in 1:10){
print(i)
}
for (i in c('1','2','3')){
print(i)
}
for (i in c('a','b','c')){
print(i)
}
sum <- 0
for (i in 1:100){
if (i %% 2 == 0) {
next
}
print(sum)
sum <- sum + i
if (sum >= 15) {
break
}
}
sum
setwd("~/UMich/2024fall/stats506/stats506-computing-methods-and-tools/HW1")
install.packages('roxygen2')
wd <-  read.table('wine/wine.data',
header = FALSE,
sep = '\t')
View(wd)
wd <-  read.table('wine/wine.data',
header = FALSE,
sep = ',')
wd <-  read.table('wine/wine.data',
header = FALSE,
sep = ',')
View(wd)
wd <-  read.table('wine/wine.data',
header = FALSE,
sep = ',')
wn <- read.table('wine/wine.names',
header = FALSE,
sep = ',')
wd <-  read.table('wine/wine.data',
header = FALSE,
sep = ',')
wn <- read.table('wine/wine.names')
wd <-  read.table('wine/wine.data',
header = FALSE,
sep = ',')
wn <- read.table('wine/wine.names',
fill = TRUE)
View(wn)
View(wn)
wd <-  read.table('wine/wine.data',
header = FALSE,
sep = ',')
class(wd)
